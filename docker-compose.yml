services:
  mysql:
    image: mysql:8.0.41
    container_name: mysql
    restart: always
    env_file:
      - .env
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping" ]
      interval: 5s
      retries: 10
      start_period: 10s
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  springboot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: springboot
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      mongo:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
      - backend/.env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8453:8453"

  mongo:
    image: mongo:8.0
    container_name: mongo
    restart: always
    env_file:
      - .env
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    ports:
      - "27018:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro

  neo4j:
    image: neo4j:5.15-enterprise
    container_name: neo4j
    restart: always
    ports:
      - "7475:7474"
      - "7688:7687"
    environment:
      NEO4J_AUTH: "neo4j/ssafyssafy"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_initial_dbms_default__database: "mindmap"
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "neo4j", "-p", "ssafyssafy", "RETURN 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs


  flask:
      build:
        context: ./python-backend
        dockerfile: Dockerfile
      container_name: flask
      restart: always
      depends_on:
        mysql:
          condition: service_healthy
        mongo:
          condition: service_healthy  
        neo4j:
          condition: service_healthy
        redis:
          condition: service_healthy
      env_file:
        - .env
        - python-backend/.env
      environment:
        - FLASK_ENV=production
        - PYTHONUNBUFFERED=1
        - IS_DOCKER=true
        - REDIS_HOST=redis
        - REDIS_PORT=6379
      ports:
        - "5001:5001"
      

  celery:
    build:
      context: ./python-backend
      dockerfile: Dockerfile
    container_name: celery_container
    command: celery -A tasks worker --loglevel=info
    restart: always
    depends_on:
      - redis
      - flask
    env_file:
      - .env
      - python-backend/.env
    environment:
      - IS_DOCKER=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  nginx:
    build:
      context: .
      dockerfile: frontend/Dockerfile  # React 빌드 후 Nginx에서 서빙
    container_name: nginx
    restart: always
    depends_on:
      - springboot
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
volumes:
  mysql_data:
  mongo_data:
  neo4j_data:
  neo4j_logs: